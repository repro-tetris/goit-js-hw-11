{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GAEL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACTF,EAAQF,IACPA,KAIDK,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAExD,OAAA,IAAIjB,QAAQ,CAACC,EAASC,KAC3BD,EAAQc,MASZH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAgBhDK,EAAkBC,IAChB5B,MAAAA,EAAQqB,EAA0B,IAAK,KACtC,OAAA,IAAInB,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACUmB,KAAKE,SAAW,GAGjCvB,EAAQ,CAAE0B,GAAID,EAAYC,GAAItB,KAAMP,IAEpCI,EAAOwB,EAAYC,KAEpB7B,MAID8B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAU/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAC/DJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"03-promisify.de0e9635.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  // Change this function\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === username ? { ...user, active: !user.active } : user,\n  );\n  return new Promise((resolve, reject) => {\n    resolve(updatedUsers);\n  });\n};\n\n// Currently the function works like this\n//toggleUserState(users, 'Mango', console.table);\n//stoggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess({ id: transaction.id, time: delay });\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}